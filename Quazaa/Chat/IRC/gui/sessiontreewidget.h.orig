/*
* Copyright (C) 2008-2013 J-P Nurmi <jpnurmi@gmail.com>
* Copyright (C) 2010-2013 SmokeX <smokexjc@gmail.com>
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*/

#ifndef SESSIONTREEWIDGET_H
#define SESSIONTREEWIDGET_H

#include <QTreeWidget>
#include <QShortcut>
#include <QColor>
#include <QHash>

#include "messageview.h"

class Session;
<<<<<<< HEAD
=======
struct Settings;
class MessageView;
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45
class MenuFactory;
class SessionTreeItem;

class SessionTreeWidget : public QTreeWidget
{
	Q_OBJECT

public:
	SessionTreeWidget(QWidget* parent = 0);

	QSize sizeHint() const;

	QByteArray saveState() const;
	void restoreState(const QByteArray& state);

	MenuFactory* menuFactory() const;
	void setMenuFactory(MenuFactory* factory);

	enum ItemStatus { Active, Inactive, Alert, Highlight };

	QColor statusColor(ItemStatus status) const;
	void setStatusColor(ItemStatus status, const QColor& color);

	QColor currentAlertColor() const;

<<<<<<< HEAD
	QList<Session*> sessions() const;
=======
    SessionTreeItem* viewItem(MessageView* view) const;
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45
    SessionTreeItem* sessionItem(Session* session) const;
public slots:
<<<<<<< HEAD
	void addSession(Session* session);
	void removeSession(Session* session);

    void addView(Session* session, MessageView* view);
    void insertView(Session* session, int index, MessageView* view);
    void removeView(Session* session, const QString& view);
    void renameView(Session* session, const QString& from, const QString& to);
	void setCurrentView(Session* session, const QString& view = QString());
=======
    void addView(MessageView* view);
    void removeView(MessageView* view);
    void renameView(MessageView* view);
    void setCurrentView(MessageView* view);
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45

	void moveToNextItem();
	void moveToPrevItem();

	void moveToNextUnreadItem();
	void moveToPrevUnreadItem();

	void expandCurrentSession();
	void collapseCurrentSession();

	void alert(SessionTreeItem* item);
	void unalert(SessionTreeItem* item);

	void applySettings();

signals:
	void editSession(Session* session);
	void closeItem(SessionTreeItem* item);
	void currentViewChanged(Session* session, const QString& view);

protected:
<<<<<<< HEAD
	void contextMenuEvent(QContextMenuEvent* event);
	void dragMoveEvent(QDragMoveEvent* event);
	bool event(QEvent* event);

private slots:
	void updateSession(Session* session = 0);
	void onItemSelectionChanged();
	void onItemExpanded(QTreeWidgetItem* item);
    void onItemCollapsed(QTreeWidgetItem* item);
    void onItemClicked(QTreeWidgetItem *item, int column);
	void delayedItemReset();
	void delayedItemResetTimeout();
	void alertTimeout();

private:
	void resetItem(SessionTreeItem* item);
	QTreeWidgetItem* lastItem() const;
	QTreeWidgetItem* nextItem(QTreeWidgetItem* from) const;
	QTreeWidgetItem* previousItem(QTreeWidgetItem* from) const;

	struct SessionTreeWidgetData {
		QColor alertColor;
		MenuFactory* menuFactory;
		QShortcut* prevShortcut;
		QShortcut* nextShortcut;
		QShortcut* prevUnreadShortcut;
		QShortcut* nextUnreadShortcut;
		QShortcut* expandShortcut;
		QShortcut* collapseShortcut;
		QHash<ItemStatus, QColor> colors;
		QSet<SessionTreeItem*> alertedItems;
		QSet<SessionTreeItem*> resetedItems;
		QHash<Session*, SessionTreeItem*> sessions;
		QVariantHash state;
	} d;
	friend class SessionTreeItem;
=======
    void contextMenuEvent(QContextMenuEvent* event);
    void dragMoveEvent(QDragMoveEvent* event);
    bool event(QEvent* event);
    QMimeData* mimeData(const QList<QTreeWidgetItem*> items) const;

private slots:
    void updateView(MessageView* view = 0);
    void updateSession(Session* session = 0);
    void onItemSelectionChanged();
    void onItemExpanded(QTreeWidgetItem* item);
    void onItemCollapsed(QTreeWidgetItem* item);
    void onItemClicked(QTreeWidgetItem* item, int column);
    void delayedItemReset();
    void delayedItemResetTimeout();
    void alertTimeout();

private:
    void resetItem(SessionTreeItem* item);
    QTreeWidgetItem* lastItem() const;
    QTreeWidgetItem* nextItem(QTreeWidgetItem* from) const;
    QTreeWidgetItem* previousItem(QTreeWidgetItem* from) const;

    struct SessionTreeWidgetData {
        QColor alertColor;
        Settings settings;
        MenuFactory* menuFactory;
        QShortcut* prevShortcut;
        QShortcut* nextShortcut;
        QShortcut* prevUnreadShortcut;
        QShortcut* nextUnreadShortcut;
        QShortcut* expandShortcut;
        QShortcut* collapseShortcut;
        QHash<ItemStatus, QColor> colors;
        QSet<SessionTreeItem*> alertedItems;
        QSet<SessionTreeItem*> resetedItems;
        QHash<MessageView*, SessionTreeItem*> viewItems;
        QHash<Session*, SessionTreeItem*> sessionItems;
        QVariantHash state;
        mutable QTreeWidgetItem* dropParent;
    } d;
    friend class SessionTreeItem;
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45
};

#endif // SESSIONTREEWIDGET_H
