/*
* Copyright (C) 2008-2013 J-P Nurmi <jpnurmi@gmail.com>
* Copyright (C) 2010-2013 SmokeX <smokexjc@gmail.com>
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*/

#ifndef MESSAGEVIEW_H
#define MESSAGEVIEW_H

#include "ui_messageview.h"
#include "messagereceiver.h"
#include "messageformatter.h"
#include "commandparser.h"
#include "quazaasettings.h"
#include <QPushButton>

class MenuFactory;
class IrcMessage;
class Session;

class MessageView : public QWidget, public MessageReceiver
{
<<<<<<< HEAD
	Q_OBJECT
	Q_PROPERTY(QString receiver READ receiver WRITE setReceiver)
=======
    Q_OBJECT
    Q_PROPERTY(bool active READ isActive NOTIFY activeChanged)
    Q_PROPERTY(QString receiver READ receiver WRITE setReceiver NOTIFY receiverChanged)
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45

public:
	enum ViewType { ServerView, ChannelView, QueryView };

	MessageView(ViewType type, Session* session, QWidget* parent = 0);
	~MessageView();

<<<<<<< HEAD
    QPushButton* closeButton;
=======
    bool isActive() const;
    ViewType viewType() const;
    Session* session() const;
    UserModel* userModel() const;
    QTextBrowser* textBrowser() const;
    MessageFormatter* messageFormatter() const;
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45

	ViewType viewType() const;
	Session* session() const;
	QTextBrowser* textBrowser() const;
	MessageFormatter* messageFormatter() const;

	QString receiver() const;
	void setReceiver(const QString& receiver);

	MenuFactory* menuFactory() const;
	void setMenuFactory(MenuFactory* factory);

	QByteArray saveSplitter() const;
	void restoreSplitter(const QByteArray& state);

public slots:
	void showHelp(const QString& text, bool error = false);
	void appendMessage(const QString& message);
	void onSend(const QString& text);
	void applySettings();

signals:
<<<<<<< HEAD
	void highlighted(IrcMessage* message);
	void alerted(IrcMessage* message);
	void queried(const QString& user);
	void appendQueryMessage(const QString& user, const QString& message);
    void appendRawMessage(const QString& message);
	void splitterChanged(const QByteArray& state);
    void openView(const QString& view);
    void closeView(const QString& view);
=======
    void activeChanged();
    void receiverChanged(const QString& receiver);

    void highlighted(IrcMessage* message);
    void alerted(IrcMessage* message);
    void queried(const QString& user);
    void splitterChanged(const QByteArray& state);
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45

protected:
	void hideEvent(QHideEvent* event);
	bool eventFilter(QObject* object, QEvent* event);

	void receiveMessage(IrcMessage* message);
	bool hasUser(const QString& user) const;

private slots:
	void onEscPressed();
	void onSplitterMoved();
	void onAnchorClicked(const QUrl& link);
	void onCustomCommand(const QString& command, const QStringList& params);
    void closePressed();

private:
<<<<<<< HEAD
	struct MessageViewData : public Ui::MessageView {
		ViewType viewType;
		QString receiver;
		Session* session;
		CommandParser parser;
		MessageFormatter* formatter;
	} d;
=======
    struct MessageViewData : public Ui::MessageView {
        ViewType viewType;
        QString receiver;
        Session* session;
        CommandParser parser;
        MessageFormatter* formatter;
        Settings settings;
        bool joined;
    } d;
>>>>>>> d1e505e4218066b25a8a3f66f111d53f7ab08e45
};

#endif // MESSAGEVIEW_H
